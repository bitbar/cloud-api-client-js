import { API } from '../API';
import { APIAdminListDevices } from './APIAdminListDevices';
import { APIAdminListNotificationPlans } from './APIAdminListNotificationPlans';
import { APIAdminListRuns } from './APIAdminListRuns';
import { APIAdminListServices } from './APIAdminListServices';
import { APIAdminListStatistics } from './APIAdminListStatistics';
import APIAdminResourceAccount from './APIAdminResourceAccount';
import { APIAdminResourceAccountService } from './APIAdminResourceAccountService';
import { APIAdminResourceCluster } from './APIAdminResourceCluster';
import { APIAdminResourceDevice } from './APIAdminResourceDevice';
import { APIAdminResourceDeviceModel } from './APIAdminResourceDeviceModel';
import { APIAdminResourceDeviceSessionStandalone } from './APIAdminResourceDeviceSessionStandalone';
import { APIAdminResourceDeviceTime } from './APIAdminResourceDeviceTime';
import { APIAdminResourceFramework } from './APIAdminResourceFramework';
import { APIAdminResourceLicense } from './APIAdminResourceLicense';
import { APIAdminResourceNotificationPlan } from './APIAdminResourceNotificationPlan';
import { APIAdminResourceRunStandalone } from './APIAdminResourceRunStandalone';
import { APIAdminResourceService } from './APIAdminResourceService';
import { APIAdminResourceUser } from './APIAdminResourceUser';
import { APIList } from './APIList';
import { APIResource } from './APIResource';
import { APIResourceAccessGroup } from './APIResourceAccessGroup';
import { APIResourceDeviceGroup } from './APIResourceDeviceGroup';
import { APIResourceFile } from './APIResourceFile';
import { APIResourceProject } from './APIResourceProject';
import { AccessGroup, AccessGroupData } from './models/AccessGroup';
import { Account } from './models/Account';
import { AccountService } from './models/AccountService';
import { Activity } from './models/Activity';
import { AdminDeviceSession, AdminInteractiveDeviceSession } from './models/AdminDeviceSession';
import { AdminDeviceType, DeviceTypeData } from './models/AdminDeviceType';
import { AdminEmail } from './models/AdminEmail';
import { AdminError } from './models/AdminError';
import { Administrator } from './models/Administrator';
import { AdminOverview } from './models/AdminOverview';
import { BillingPeriod } from './models/BillingPeriod';
import { Browser, BrowserData } from './models/Browser';
import { CountryVatRate, CountryVatRateData } from './models/CountryVatRate';
import { DeviceModelCriterion, DeviceModelCriterionData } from './models/DeviceModelCriterion';
import { DeviceModelPool, DeviceModelPoolData } from './models/DeviceModelPool';
import { Framework, FrameworkData } from './models/Framework';
import { License, LicenseData } from './models/License';
import { Maintenance, MaintenanceData } from './models/Maintenance';
import { Project } from './models/Project';
import { Role, RoleParams } from './models/Role';
import { Settings, SettingsParams } from './models/Settings';
import { User, UserData, UserParams } from './models/User';
import { DeviceTimeSummaryParams, UserDeviceTimeSummary } from './models/UserDeviceTimeSummary';
import { UserFile, UserFileData, UserFileParams } from './models/UserFile';
import { Cluster } from './models/Cluster';
import { DeviceProperty } from './models/Device';
import { DeviceGroup } from './models/DeviceGroup';
import { DeviceModel } from './models/DeviceModel';
import { DeviceProblem } from './models/DeviceProblem';
import { DeviceStatus } from './models/DeviceStatus';
import { CollectionQueryParams, NoQueryParams } from './models/HTTP';
export declare class APIAdminResource extends APIResource {
    constructor(parent: API);
    accessGroups(): APIList<AccessGroup, CollectionQueryParams, AccessGroupData>;
    accessGroup(id: number): APIResourceAccessGroup;
    accounts(): APIList<Account, CollectionQueryParams, any>;
    account(id: number): APIAdminResourceAccount;
    accountServices(): APIList<AccountService, CollectionQueryParams, any>;
    accountService(id: number): APIAdminResourceAccountService;
    activities(): APIList<Activity, CollectionQueryParams, any>;
    administrators(): APIList<Administrator, CollectionQueryParams, any>;
    billingPeriods(): APIList<BillingPeriod, CollectionQueryParams, any>;
    billingPeriod(id: number): APIResource<BillingPeriod, import("./models/HTTP").QueryParams, import("./models/HTTP").QueryParams>;
    browsers(): APIList<Browser, CollectionQueryParams, BrowserData>;
    browser(id: number): APIResource<Browser, NoQueryParams, BrowserData>;
    clusters(): APIList<Cluster, CollectionQueryParams, any>;
    cluster(id: number): APIAdminResourceCluster;
    countryVatRates(): APIList<CountryVatRate, CollectionQueryParams, CountryVatRateData>;
    countryVatRate(id: number): APIResource<CountryVatRate, NoQueryParams, Omit<CountryVatRate, "country">>;
    devices(): APIAdminListDevices;
    device(id: number): APIAdminResourceDevice;
    devicesForModel(id: number): APIAdminListDevices;
    deviceStatuses(): APIList<DeviceStatus, CollectionQueryParams, any>;
    deviceModels(): APIList<DeviceModel, CollectionQueryParams, any>;
    deviceModel(id: number): APIAdminResourceDeviceModel;
    deviceProblems(): APIList<DeviceProblem, CollectionQueryParams, any>;
    deviceModelCriterias(): APIList<DeviceModelCriterion, CollectionQueryParams, DeviceModelCriterionData>;
    deviceModelCriteria(id: number): APIResource<DeviceModelCriterion, import("./models/HTTP").QueryParams, import("./models/HTTP").QueryParams>;
    deviceSessions(): APIList<AdminDeviceSession, CollectionQueryParams, any>;
    deviceSession(id: number): APIAdminResourceDeviceSessionStandalone;
    deviceTime(): APIAdminResourceDeviceTime;
    deviceTimeSummary(): APIList<UserDeviceTimeSummary, DeviceTimeSummaryParams, any>;
    deviceTypes(): APIList<AdminDeviceType, CollectionQueryParams, any>;
    deviceType(id: number): APIResource<AdminDeviceType, NoQueryParams, DeviceTypeData>;
    deviceGroups(): APIList<DeviceGroup, CollectionQueryParams, any>;
    deviceGroup(id: number): APIResourceDeviceGroup;
    emails(): APIList<AdminEmail, CollectionQueryParams, any>;
    resendEmail(id: number): APIResource<AdminEmail, import("./models/HTTP").QueryParams, import("./models/HTTP").QueryParams>;
    errors(): APIList<AdminError, CollectionQueryParams, any>;
    files(): APIList<UserFile, UserFileParams, UserFileData>;
    file(id: number): APIResourceFile;
    frameworks<T = Framework, U extends CollectionQueryParams = CollectionQueryParams, W = FrameworkData>(): APIList<T, U, W>;
    framework(id: number): APIAdminResourceFramework;
    frameworkAvailableLabels(): APIList<DeviceProperty, CollectionQueryParams, void>;
    interactiveQueue(): APIList<AdminInteractiveDeviceSession, CollectionQueryParams, any>;
    licenses(): APIList<License, CollectionQueryParams, LicenseData>;
    license(id: number): APIAdminResourceLicense;
    maintenance(): APIResource<Maintenance, NoQueryParams, MaintenanceData>;
    notificationPlans(): APIAdminListNotificationPlans;
    notificationPlan(id: number): APIAdminResourceNotificationPlan;
    overview(): APIResource<AdminOverview, import("./models/HTTP").QueryParams, import("./models/HTTP").QueryParams>;
    pools(): APIList<DeviceModelPool, CollectionQueryParams, any>;
    pool(id: number): APIResource<DeviceModelPool, NoQueryParams, DeviceModelPoolData>;
    projects(): APIList<Project, CollectionQueryParams, any>;
    project(id: number): APIResourceProject;
    roles(): APIList<Role, RoleParams, void>;
    runs(): APIAdminListRuns;
    run(id: number): APIAdminResourceRunStandalone;
    samples(): APIList<UserFile, CollectionQueryParams, Pick<UserFileData, "file">>;
    sample(id: number): APIResource<UserFile, import("./models/HTTP").QueryParams, import("./models/HTTP").QueryParams>;
    services(): APIAdminListServices;
    service(id: number): APIAdminResourceService;
    settings(): APIResource<Settings, SettingsParams, SettingsParams>;
    statistics(): APIAdminListStatistics;
    users(): APIList<User, UserParams, UserData>;
    createUser(): APIList<User, NoQueryParams, UserData>;
    user(id: number): APIAdminResourceUser;
}
export default APIAdminResource;
